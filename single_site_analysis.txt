{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a94eb55b",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np \n",
    "import pandas as pd \n",
    "import math \n",
    "import matplotlib.pyplot as plt \n",
    "from scipy.sparse import coo_matrix \n",
    "import numpy.matlib \n",
    "import numpy.linalg as LA \n",
    "from numpy.linalg import inv \n",
    "import gzip\n",
    "import random\n",
    "\n",
    "#to convert the amino acids letters into integer numbers from 0 to 20\n",
    "def letter2number(a): \n",
    "    switcher = {\n",
    "        '-': 20,'A': 0,'C': 1,'D':2,'E':3,'F':4,'G':5,'H':6,'I':7,'K':8,'L':9,'M':10,'N':11,'P':12,'Q':13,'R':14,\n",
    "        'S':15,'T':16,'V':17,'W':18,'Y':19 }\n",
    "    return switcher.get(a,0)\n",
    "#### to check the similarity or dissimilarity between two sequences\n",
    "def dH(seq1, seq2):\n",
    "    return sum(c1 != c2 for c1, c2 in zip(seq1, seq2))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "b330837d",
   "metadata": {},
   "outputs": [],
   "source": [
    "#### Open the file and write in \"seqs\" a list containing all lines\n",
    "data=gzip.open('PF00014_mgap6.fasta.gz','rt')\n",
    "seqs = data.readlines()[1::2]\n",
    "data.close()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "2e8383d5",
   "metadata": {},
   "outputs": [],
   "source": [
    "M=13600\n",
    "#print(seqs[0])\n",
    "#print(seqs[1])\n",
    "weight=[]\n",
    "for i in range(M):\n",
    "    value= -1\n",
    "    for j in range(M):\n",
    "        if dH(seqs[i], seqs[j])>11:\n",
    "            value = value\n",
    "            #print(value)\n",
    "        else:\n",
    "            value=value+1\n",
    "    #print(value)\n",
    "    if value==0:\n",
    "        weight1=1\n",
    "        #print(weight1)\n",
    "        weight.append(weight1) \n",
    "    else:\n",
    "        weight1= (1/value)\n",
    "        #print(weight1)\n",
    "        weight.append(weight1)  \n",
    "#print(weight)   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "f0bd8974",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4987.293341858404"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sum(weight)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "8534f74f",
   "metadata": {},
   "outputs": [],
   "source": [
    "data=gzip.open('weights_14.gz', 'rt')\n",
    "trainingWeights = [float(i) for i in data.readlines()]\n",
    "#print(trainingWeights)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "b2f6a36f",
   "metadata": {},
   "outputs": [],
   "source": [
    "#sum(trainingWeights)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "d1a68162",
   "metadata": {},
   "outputs": [],
   "source": [
    "#### See all sequences into numeric matrix form\n",
    "M=np.size(seqs)\n",
    "L=len(seqs[0])-1\n",
    "Np=int(L*(L-1)/2)\n",
    "#print(M,L)\n",
    "align=np.zeros((M,L)).astype(int)\n",
    "for m in range (M):\n",
    "    for i in range (L):\n",
    "        align[m,i]=letter2number(seqs[m][i])  \n",
    "#print(align)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "80d8b683",
   "metadata": {},
   "outputs": [],
   "source": [
    "###To ensure that each pair appears at each site, the cell below generates \"fake\" sequences with a very low weight.\n",
    "align_new = np.zeros((len(align[:,1])+21,len(align[1,:])))\n",
    "align_new[:-21,:] = align\n",
    "for i in range(21):\n",
    "        align_new[-i-1,:] = np.ones(L)*i\n",
    "#print(align_new)\n",
    "for i in range(L):\n",
    "    np.random.shuffle(align_new[len(align[:,1]):,i])\n",
    "align_new = align_new.astype(int)\n",
    "new_order=np.array([2,13,22, 42, 30, 21,  7, 50, 14, 15, 11, 49,  5, 28,  9, 38, 25, 27, 23, 12, 44, 45, 48, 24,\n",
    " 35,  6, 46,  3, 32,  4,  0, 18, 16, 40, 43, 52, 20, 17, 34, 19, 31, 37, 36, 10, 29, 33,  8, 41,\n",
    "  1, 39, 51, 47, 26])\n",
    "align_new=align_new[:, new_order]\n",
    "#print(align_new)\n",
    "####for same weight 1\n",
    "#new_order=np.array([13, 2, 22, 30, 42, 21, 14, 50, 15,  7, 11, 49, 27,  5, 25, 28,  9, 38, 23, 12, 44, 48,  6, 35,\n",
    "# 24, 45, 46,  3, 32,  0,  4, 18, 43, 16, 52, 40, 20, 17, 34, 19, 31, 10, 37, 36, 33, 29,  8 ,41,\n",
    "#  1, 51, 39, 47, 26])\n",
    "#align_new=align_new[:, new_order]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "9bf8e8a5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.03834628 0.000517   0.0439173  0.05962458 0.04179441 0.02293086\n",
      " 0.02961155 0.02093981 0.06409157 0.12815568 0.0327196  0.0667996\n",
      " 0.00170892 0.05937085 0.06324429 0.14549951 0.07656518 0.02172347\n",
      " 0.00285306 0.02910154 0.05048491]\n",
      "[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\n",
      " 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47\n",
      " 48 49 50 51 52]\n"
     ]
    }
   ],
   "source": [
    "\n",
    "#### possibility to give a file with weights\n",
    "#data=gzip.open('weights_14.gz', 'rt')\n",
    "#trainingWeights = [float(i) for i in data.readlines()]\n",
    "#print(trainingWeights)\n",
    "#data.close()\n",
    "#trainingWeights = np.loadtxt(\"weights_14\") \n",
    "trainingWeights=weight\n",
    "trainingWeights_new = np.ones(len(trainingWeights)+21)*10**(-6)\n",
    "trainingWeights_new[:len(trainingWeights)] = trainingWeights\n",
    "#print(len(trainingWeights_new))\n",
    "# uncomment these ligns to put uniform weights \n",
    "#trainingWeights = np.ones(M) \n",
    "#trainingWeights_new = np.ones(len(trainingWeights)+21)*10**(-6)\n",
    "\n",
    "\n",
    "####Expand the alignment in a bynary (M,21xL) array (one-hot encoding)\n",
    "q=21; \n",
    "msa=np.zeros((M+21,L*q))#.astype(int)  \n",
    "for m in range(M+21):\n",
    "    for i in range(L):\n",
    "        msa[m,i*q+align_new[m,i]]=1 \n",
    "\n",
    "####Calculate the 1-point frequencies \n",
    "msa_reweighted = np.copy(msa[:M,:])\n",
    "#msa_reweighted = np.copy(msa)\n",
    "\n",
    "for i in range(len(msa[:M,1])):\n",
    "    msa_reweighted[i,:]*= trainingWeights[i]/np.sum(trainingWeights)\n",
    "p=np.sum(msa_reweighted,0)\n",
    "\n",
    "#for i in range(len(msa)):\n",
    "   # msa_reweighted[i,:]*= trainingWeights_new[i]/np.sum(trainingWeights_new)\n",
    "#pa=np.sum(msa_reweighted,0)\n",
    "#print(p)\n",
    "\n",
    "####Pseudocount alfa in order to include possibility of each pair in a single sites\n",
    "alfa=0.0001;\n",
    "pa=(1-alfa)*p + alfa/21.\n",
    "print(pa[0:21])\n",
    "#print(np.log(pa[:q])[:])\n",
    "\n",
    "#### determine the most conserved sites first using shanon entropy\n",
    "prob_f=np.zeros(L)\n",
    "for i in range(L):\n",
    "    prob=0\n",
    "    for j in range(i*q,(i+1)*q):\n",
    "        if pa[j]==0:\n",
    "            prob=prob\n",
    "            #print(prob)\n",
    "        else:\n",
    "            prob= prob - pa[j]* np.log(pa[j])\n",
    "            #print(prob, p[j]* np.log(p[j]))\n",
    "    prob_f[i]=prob\n",
    "#print(prob_f)\n",
    "import numpy\n",
    "ascind=numpy.argsort(prob_f)\n",
    "neworder=ascind[::-1]\n",
    "print(neworder)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "fd85883d",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "q=21\n",
    "L=53\n",
    "prob_ff=np.zeros(L)\n",
    "for i in range(L):\n",
    "    arr=np.array(pa[i*q:(i+1)*q])\n",
    "    #print(arr)\n",
    "    prob_1= np.amax(arr)\n",
    "    #print(prob_1)\n",
    "    prob_ff[i] = np.where(arr == np.amax(arr))[0]\n",
    "#print(prob_ff)\n",
    "    #Prob_ff=np.array([102,108,205,404])\\n\",\n",
    "    #prob_fff= Prob_ff//21,Prob_ff%21"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "214a6bf0",
   "metadata": {},
   "outputs": [],
   "source": [
    "def Bestpair(Prob_array,q):\n",
    "    def number2letter(a): \n",
    "        switcher = {20:'-',0:'A',1:'C',2:'D',3:'E',4:'F',5:'G',6:'H',7:'I',8:'K',9:'L',10:'M',11:'N',12:'P',13:'Q',14:'R',\n",
    "        15:'S',16:'T',17:'V',18:'W',19:'Y', }\n",
    "        return switcher.get(a,0)\n",
    "    Amino_indices=np.zeros(L)\n",
    "    for i in range(L):\n",
    "        arr=np.array(Prob_array[i*q:(i+1)*q])\n",
    "        maxi=np.amax(arr)\n",
    "        #print(arr)\n",
    "        Amino_indices[i] = np.where(arr == maxi)[0]\n",
    "    #print(Amino_indices)\\n\",\n",
    "    Amino_1st,Amino_2nd= Amino_indices//21, Amino_indices%21\n",
    "    #print(Amino_1st)\n",
    "    #print(Amino_2nd)\n",
    "    first_amino_name=[]\n",
    "    second_amino_name=[]\n",
    "    for qq in range(L):\n",
    "        first_amino=number2letter(Amino_1st[qq])\n",
    "        first_amino_name.append(first_amino)\n",
    "        second_amino=number2letter(Amino_2nd[qq])\n",
    "        second_amino_name.append(second_amino)\n",
    "    Best_pair=list(zip(first_amino_name,second_amino_name))\n",
    "    return Best_pair\n",
    "#print(Bestpair(pa,21))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "9826e6ff",
   "metadata": {},
   "outputs": [],
   "source": [
    "####Routine with sklearn\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "lreg = LogisticRegression(penalty='l2', tol=0.001, C=1, fit_intercept=True, intercept_scaling=1,\n",
    "            class_weight=None, random_state=None, solver='lbfgs', max_iter=2000, multi_class='multinomial', verbose=0)\n",
    "#i = 1\n",
    "#regsite1 = lreg.fit(msa[0:,:i*q], align_new2[0:,i],sample_weight=trainingWeights_new)print(regsite1.score(msa[0:,:i*q], align_new2[0:,i]))\n",
    "#print(regsite1.score(msa[0:,:q*i], align_new2[0:,i]))\n",
    "#print(len(regsite1.coef_[1,:]),len(regsite1.coef_[:,1]))\n",
    "#print(len(regsite1.coef_))\n",
    "\n",
    "\n",
    "####Sampling and learning\n",
    "def one_hot_enc(sample,M):\n",
    "    #M = len(sample[:,1])\n",
    "    L = len(sample[1,:])\n",
    "    one_h=np.zeros((M,L*q))#.astype(int)  \n",
    "    for m in range(M):\n",
    "        for i in range(L):\n",
    "            one_h[m,i*q+int(sample[m,i])-1]=1 \n",
    "    return one_h\n",
    "\n",
    "#### fix the best value of regularization coefficient value\n",
    "## uncomment when we optimize the coefficient\n",
    "#from sklearn.linear_model import LogisticRegression\n",
    "#i=1;\n",
    "#scoreAll=[]\n",
    "#quantityAll=[]\n",
    "#for c1 in np.arange(1.5,5,0.5):\n",
    "    #lreg = LogisticRegression(penalty='l2', tol=0.001, C=c1, fit_intercept=True, intercept_scaling=1,\n",
    "            #class_weight=None, random_state=None, solver='lbfgs', max_iter=1000, multi_class='multinomial', verbose=0)\n",
    "    #regsite1 = lreg.fit(msa[0:,:i*q], align_new2[0:,i],sample_weight=trainingWeights_new)\n",
    "    #score=regsite1.score(msa[0:,:i*q], align_new2[0:,i])\n",
    "    #quantity=c1\n",
    "    #scoreAll.append(score)\n",
    "    #print(score)\n",
    "    #print(scoreAll)\n",
    "    #quantityAll.append(quantity)\n",
    "#plt.plot(quantityAll,scoreAll)\n",
    "\n",
    "\n",
    "###The cell below learn a model and returns the parameters of the model in a matrix J and a sample of this model\n",
    "J = np.zeros((L,q**2*(L-1)+q))\n",
    "nb_sample = 13600\n",
    "sample = np.zeros((nb_sample,L))\n",
    "site =0\n",
    "J[0,q**2*(L-1):] = np.log(pa[:q])[:]\n",
    "for i in range(nb_sample):\n",
    "    sample[i,site] =  np.random.choice(np.arange(1,22), 1, p=pa[:q])[0]\n",
    "for i in range(1,L):\n",
    "    reg = lreg.fit(msa[0:,:i*q], align_new[0:,i],sample_weight=trainingWeights_new)\n",
    "    Jtemp = reg.coef_\n",
    "    #print(len(Jtemp[:,1]),len(Jtemp[1,:]))\n",
    "    for j in range(i):\n",
    "        for k in range(q):\n",
    "            J[i,j*q**2+k*q:(k+1)*q+j*q**2] = Jtemp[k,j*q:(j+1)*q]\n",
    "    classes = reg.classes_\n",
    "    prob = reg.predict_proba(one_hot_enc(sample[:,:i],nb_sample))\n",
    "    #print(len(prob[1,:]),len(prob[:,1]))\n",
    "    J[i,q**2*(L-1):]  = reg.intercept_\n",
    "    for j in range(nb_sample):\n",
    "        sample[j,i] =  np.random.choice(classes+1, 1, p=prob[j,:])[0]\n",
    "sample-=1\n",
    "\n",
    "\n",
    "##### one-hot decoding for sample sequences\n",
    "sample_one_hot =np.zeros((nb_sample,L*q))#.astype(int)  \n",
    "for m in range(nb_sample):\n",
    "    for i in range(L):\n",
    "        sample_one_hot[m,i*q+int(sample[m,i])]=1 \n",
    "        \n",
    "        \n",
    "##### 1 point frequency\n",
    "freq_data = np.zeros(q*L)\n",
    "freq_sample = np.zeros(q*L)\n",
    "#print(freq_sample)\n",
    "for i in range(q*L):\n",
    "    #freq_data[i] = np.sum(msa_reweighted[:,i])\n",
    "    freq_sample[i] = np.sum(sample_one_hot[:,i])/nb_sample\n",
    "\n",
    "#### find the best amino-acid pair in neighbouring sites\n",
    "def Bestpair(Prob_array):\n",
    "    def number2letter(a): \n",
    "        switcher = {20:'-',0:'A',1:'C',2:'D',3:'E',4:'F',5:'G',6:'H',7:'I',8:'K',9:'L',10:'M',11:'N',12:'P',13:'Q',14:'R',\n",
    "        15:'S',16:'T',17:'V',18:'W',19:'Y', }\n",
    "        return switcher.get(a,0)\n",
    "    Amino_indices=np.zeros(L)\n",
    "    for i in range(L):\n",
    "        arr=np.array(Prob_array[i*q:(i+1)*q])\n",
    "        maxi=np.amax(arr)\n",
    "        #print(arr)\n",
    "        Amino_indices[i] = np.where(arr == maxi)[0]\n",
    "    #print(Amino_indices)\n",
    "    Amino_1st,Amino_2nd= Amino_indices//21, Amino_indices%21\n",
    "    #print(Amino_1st)\n",
    "    #print(Amino_2nd)\n",
    "    first_amino_name=[]\n",
    "    second_amino_name=[]\n",
    "    for qq in range(L):\n",
    "        first_amino=number2letter(Amino_1st[qq])\n",
    "        first_amino_name.append(first_amino)\n",
    "        second_amino=number2letter(Amino_2nd[qq])\n",
    "        second_amino_name.append(second_amino)\n",
    "    Best_pair=list(zip(first_amino_name,second_amino_name))\n",
    "    return Best_pair\n",
    "\n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "8baf14b3",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Bestpair(freq_sample)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "73092617",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 504x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 504x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "###plot one point frequency for real and sample data   \n",
    "plt.scatter(p,freq_sample)\n",
    "plt.xticks(size = 20)\n",
    "plt.yticks(size = 20)\n",
    "plt.xlabel(\"Data\",size = 20)\n",
    "plt.ylabel(\"Sample arDCA\",size = 20)\n",
    "pearson_coefficient=np.corrcoef(p, freq_sample)[0][1]\n",
    "plt.title(f\" One Point Frequency:Pearson_Coeff = {pearson_coefficient}\" )\n",
    "plt.savefig('1pointfrequency_single_new.pdf', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "#####PCA\n",
    "from sklearn.decomposition import PCA\n",
    "pca = PCA(n_components=2).fit(msa[:M,:])\n",
    "my_cmap = plt.cm.jet\n",
    "#my_cmap.set_under('w',0.01)\n",
    "X = pca.transform(msa[:M,:])\n",
    "X2 = pca.transform(sample_one_hot)\n",
    "plt.figure(figsize=(7,6))\n",
    "plt.plot(X[:,0],X[:,1],'o',label = \"data\")\n",
    "plt.plot(X2[:,0],X2[:,1],'o',label = \"sample arDCA\")\n",
    "plt.xlabel(\"Principal component 1\",size = 20)\n",
    "plt.ylabel(\"Principal component 2\",size = 20)\n",
    "plt.xticks(size = 20)\n",
    "plt.yticks(size = 20)\n",
    "plt.legend(fontsize = 20)\n",
    "plt.savefig('sample_data_PSA_single_new.pdf', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "######Can a profile model reproduce the PSA plot?\n",
    "sample_pro = np.zeros((nb_sample,L))\n",
    "site =0\n",
    "for site in range(L):\n",
    "    for i in range(nb_sample):\n",
    "        sample_pro[i,site] =  np.random.choice(np.arange(1,22), 1, p=pa[site*q:(site+1)*q])[0]    \n",
    "sample_pro-=1  \n",
    "#sample_pro\n",
    "sample_pro_one_hot =np.zeros((nb_sample,L*q))#.astype(int)  \n",
    "for m in range(nb_sample):\n",
    "    for i in range(L):\n",
    "        sample_pro_one_hot[m,i*q+int(sample_pro[m,i])]=1 \n",
    "X3 = pca.transform(sample_pro_one_hot)\n",
    "plt.figure(figsize=(7,6))\n",
    "plt.plot(X[:,0],X[:,1],'o',label = \"data\")\n",
    "plt.plot(X3[:,0],X3[:,1],'o',label = \"sample profile\")\n",
    "plt.xlabel(\"Principal component 1\",size = 20)\n",
    "plt.ylabel(\"Principal component 2\",size = 20)\n",
    "plt.xticks(size = 20)\n",
    "plt.yticks(size = 20)\n",
    "plt.legend(fontsize = 20)\n",
    "plt.savefig('profile_data_PSA_single_new.pdf', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "af10dcff",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "            "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d7733500",
   "metadata": {},
   "outputs": [],
   "source": [
    "def singlefrequency_data(matrix,site,amino):\n",
    "    matlen=len(matrix)\n",
    "    count=0\n",
    "    for i in range(matlen):\n",
    "        if matrix[i][site]==amino:\n",
    "            count= count+ trainingWeights[i]/np.sum(trainingWeights)\n",
    "        else:\n",
    "            count=count\n",
    "    singlepoint=count\n",
    "    return singlepoint\n",
    "def singlefrequency_sample(matrix,site,amino):\n",
    "    matlen=len(matrix)\n",
    "    count=0\n",
    "    for i in range(matlen):\n",
    "        if matrix[i][site]==amino:\n",
    "            count= count+ 1\n",
    "        else:\n",
    "            count=count\n",
    "    singlepoint=count/matlen       \n",
    "    return singlepoint\n",
    "def twofrequency_data(matrix,siteA,siteB,aminoA,aminoB):\n",
    "    matlen=len(matrix)\n",
    "    count=0\n",
    "    for i in range(matlen):\n",
    "        if (matrix[i][siteA]==aminoA and matrix[i][siteB]==aminoB):\n",
    "            count= count+ trainingWeights[i]/np.sum(trainingWeights)\n",
    "        else:\n",
    "            count=count\n",
    "    twopoint=count\n",
    "    return twopoint\n",
    "def twofrequency_sample(matrix,siteA,siteB,aminoA,aminoB):\n",
    "    matlen=len(matrix)\n",
    "    count=0\n",
    "    for i in range(matlen):\n",
    "        if (matrix[i][siteA]==aminoA and matrix[i][siteB]==aminoB):\n",
    "            count= count+ 1\n",
    "        else:\n",
    "            count=count\n",
    "    twopoint=count/matlen\n",
    "    return twopoint\n",
    "def threefrequency_data(matrix,siteA,siteB,siteC,aminoA,aminoB,aminoC):\n",
    "    matlen=len(matrix)\n",
    "    count=0\n",
    "    for i in range(matlen):\n",
    "        if (matrix[i][siteA]==aminoA and matrix[i][siteB]==aminoB and matrix[i][siteC]==aminoC ):\n",
    "            count= count+ trainingWeights[i]/np.sum(trainingWeights)\n",
    "        else:\n",
    "            count=count\n",
    "    threepoint=count\n",
    "    return threepoint\n",
    "def threefrequency_sample(matrix,siteA,siteB,siteC,aminoA,aminoB,aminoC):\n",
    "    matlen=len(matrix)\n",
    "    count=0\n",
    "    for i in range(matlen):\n",
    "        if (matrix[i][siteA]==aminoA and matrix[i][siteB]==aminoB and matrix[i][siteC]==aminoC):\n",
    "            count= count+ 1\n",
    "        else:\n",
    "            count=count\n",
    "    threepoint=count/matlen\n",
    "    return threepoint"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "52a0f8c9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x25e1e236df0>"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def point2corr(matrixA,matrixB):\n",
    "    twocorrA=[]\n",
    "    twocorrB=[]\n",
    "    itera=0\n",
    "    while itera<100:\n",
    "        site1=random.randint(0,52)\n",
    "        site2=random.randint(0,52)\n",
    "        amino1=random.randint(0,20)\n",
    "        amino2=random.randint(0,20)\n",
    "        \n",
    "        singlefreqsite1A=singlefrequency_data(matrixA,site1,amino1)\n",
    "        singlefreqsite2A=singlefrequency_data(matrixA,site2,amino2)\n",
    "        singlefreqsite1B=singlefrequency_sample(matrixB,site1,amino1)\n",
    "        singlefreqsite2B=singlefrequency_sample(matrixB,site2,amino2)\n",
    "        twofreqsite1A=twofrequency_data(matrixA,site1,site2,amino1,amino2)\n",
    "        twofreqsite1B=twofrequency_sample(matrixB,site1,site2,amino1,amino2)\n",
    "              \n",
    "        twopointcorrA=twofreqsite1A-singlefreqsite1A*singlefreqsite2A\n",
    "        twopointcorrB=twofreqsite1B-singlefreqsite1B*singlefreqsite2B\n",
    "        twocorrA.append(twopointcorrA)\n",
    "        twocorrB.append(twopointcorrB)\n",
    "\n",
    "        itera=itera+1\n",
    "    return twocorrA,twocorrB\n",
    "#print(twocorr)\n",
    "datatwocorr,sampletwocorr= point2corr(align_new[0:13600],sample)\n",
    "plt.scatter(datatwocorr,sampletwocorr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "6c6711e0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x25e1e3ca910>"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "### three point correlation\n",
    "\n",
    "def point3corr(matrixA,matrixB):\n",
    "    threecorrA=[]\n",
    "    threecorrB=[]\n",
    "    itera=0\n",
    "    while itera<100:\n",
    "        site1=random.randint(0,52)\n",
    "        site2=random.randint(0,52)\n",
    "        site3=random.randint(0,52)\n",
    "        amino1=random.randint(0,20)\n",
    "        amino2=random.randint(0,20)\n",
    "        amino3=random.randint(0,20)\n",
    "        \n",
    "        singlefreqsite1A=singlefrequency_data(matrixA,site1,amino1)\n",
    "        singlefreqsite2A=singlefrequency_data(matrixA,site2,amino2)\n",
    "        singlefreqsite3A=singlefrequency_data(matrixA,site3,amino3)\n",
    "        singlefreqsite1B=singlefrequency_sample(matrixB,site1,amino1)\n",
    "        singlefreqsite2B=singlefrequency_sample(matrixB,site2,amino2)\n",
    "        singlefreqsite3B=singlefrequency_sample(matrixB,site3,amino3)\n",
    "        twofreqsite1A=twofrequency_data(matrixA,site1,site2,amino1,amino2)\n",
    "        twofreqsite2A=twofrequency_data(matrixA,site1,site3,amino1,amino3)\n",
    "        twofreqsite3A=twofrequency_data(matrixA,site2,site3,amino2,amino3)\n",
    "        twofreqsite1B=twofrequency_sample(matrixB,site1,site2,amino1,amino2)\n",
    "        twofreqsite2B=twofrequency_sample(matrixB,site1,site3,amino1,amino3)\n",
    "        twofreqsite3B=twofrequency_sample(matrixB,site2,site3,amino2,amino3)\n",
    "        threefreqsite1A=threefrequency_data(matrixA,site1,site2,site3,amino1,amino2,amino3)\n",
    "        threefreqsite1B=threefrequency_sample(matrixB,site1,site2,site3,amino1,amino2,amino3)\n",
    "              \n",
    "        threepointcorrA= (threefreqsite1A-singlefreqsite3A*twofreqsite1A-singlefreqsite2A*twofreqsite2A-\n",
    "                          singlefreqsite1A*twofreqsite3A + 2*singlefreqsite1A*singlefreqsite2A*singlefreqsite3A)\n",
    "        threepointcorrB= (threefreqsite1B-singlefreqsite3B*twofreqsite1B-singlefreqsite2B*twofreqsite2B-\n",
    "                          singlefreqsite1B*twofreqsite3B + 2*singlefreqsite1B*singlefreqsite2B*singlefreqsite3B)\n",
    "        threecorrA.append(threepointcorrA)\n",
    "        threecorrB.append(threepointcorrB)\n",
    "\n",
    "        itera=itera+1\n",
    "    return threecorrA,threecorrB\n",
    "#print(twocorr)\n",
    "datathreecorr,samplethreecorr= point3corr(align_new[0:13600],sample)\n",
    "plt.scatter(datathreecorr,samplethreecorr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "id": "ffc1e839",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x1c3205d3ee0>"
      ]
     },
     "execution_count": 103,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "## two point correlation\n",
    "\n",
    "def point2corr(matrixA,matrixB):\n",
    "    matlen=len(matrixA)\n",
    "    twocorrA=[]\n",
    "    twocorrB=[]\n",
    "    itera=0\n",
    "    while itera<100:\n",
    "        site1=random.randint(0,52)\n",
    "        site2=random.randint(0,52)\n",
    "        amino1=random.randint(0,20)\n",
    "        amino2=random.randint(0,20)\n",
    "        \n",
    "        count=0\n",
    "        for i in range(matlen):\n",
    "            if matrixA[i][site1]==amino1:\n",
    "                count= count+ trainingWeights[i]/np.sum(trainingWeights)\n",
    "            else:\n",
    "                count=count\n",
    "        singlefreqsite1A=count\n",
    "        \n",
    "        for i in range(matlen):\n",
    "            if matrixB[i][site1]==amino1:\n",
    "                count += 1\n",
    "            else:\n",
    "                count=count\n",
    "        singlefreqsite1B=count/matlen\n",
    "        \n",
    "        count=0\n",
    "        for i in range(matlen):\n",
    "            if matrixA[i][site2]==amino2:\n",
    "                count= count+trainingWeights[i]/np.sum(trainingWeights)\n",
    "            else:\n",
    "                count=count\n",
    "        singlefreqsite2A=count\n",
    "        \n",
    "        count=0\n",
    "        for i in range(matlen):\n",
    "            if matrixB[i][site2]==amino2:\n",
    "                count=count+1\n",
    "            else:\n",
    "                count=count\n",
    "        singlefreqsite2B=count/matlen\n",
    "        \n",
    "        count=0\n",
    "        for i in range(matlen):\n",
    "            if (matrixA[i][site1]==amino1 and matrixA[i][site2]==amino2):\n",
    "                count= count+ trainingWeights[i]/np.sum(trainingWeights)\n",
    "            else:\n",
    "                count=count\n",
    "        twofreqsite1A=count\n",
    "        \n",
    "        count=0\n",
    "        for i in range(matlen):\n",
    "            if (matrixB[i][site1]==amino1 and matrixB[i][site2]==amino2):\n",
    "                count=count+1\n",
    "            else:\n",
    "                count=count\n",
    "        twofreqsite1B=count/matlen\n",
    "        \n",
    "        \n",
    "        twopointcorrA=twofreqsite1A-singlefreqsite1A*singlefreqsite2A\n",
    "        twopointcorrB=twofreqsite1B-singlefreqsite1B*singlefreqsite2B\n",
    "        twocorrA.append(twopointcorrA)\n",
    "        twocorrB.append(twopointcorrB)\n",
    "\n",
    "        itera=itera+1\n",
    "    return twocorrA,twocorrB\n",
    "#print(twocorr)\n",
    "datatwocorr,sampletwocorr= point2corr(align_new[0:13600],sample)\n",
    "plt.scatter(datatwocorr,sampletwocorr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9d27cd93",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "be5c4aee",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ade82d92",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "89e8bfe9",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "eae849f0",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e20bdaea",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d36e8710",
   "metadata": {},
   "outputs": [],
   "source": [
    "def dH(seq1, seq2):\n",
    "    return sum(c1 != c2 for c1, c2 in zip(seq1, seq2))\n",
    "\n",
    "#### Hamming distance between a randomly chosen generated sequence and a randomly chosen natural sequence\n",
    "import random\n",
    "def Hamming_org_sample(matrixA, matrixB,num0):\n",
    "    matrix_length, matrix_size =len(matrixA), len(matrixA[1,:])\n",
    "    Hamming_array=[]\n",
    "    itera=0\n",
    "    while itera<num0:\n",
    "        num1=random.randint(0,matrix_length)\n",
    "        num2=random.randint(0,matrix_length)\n",
    "        seq_1=matrixA[num1]\n",
    "        seq_2=matrixB[num2]\n",
    "        diff=dH(seq_1,seq_2)\n",
    "        norm_diff=diff/matrix_size\n",
    "        Hamming_array.append(norm_diff)\n",
    "        \n",
    "        itera=itera+1\n",
    "    return Hamming_array\n",
    "serial_num=np.arange(1000)\n",
    "Hamming= Hamming_org_sample(align_new[0:13600],sample,1000)\n",
    "plt.scatter(serial_num, Hamming)\n",
    "plt.xlabel('serial_number')\n",
    "plt.ylabel('Hamming_distance')\n",
    "plt.title('Ham_distance_between_a_gen_seq_and_a_nat_seq')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "660d856f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#### Hamming distance between a randomly chosen pairs of sequences in any sequences\n",
    "import random\n",
    "def Hamming_same_sequence(matrixA,num0):\n",
    "    matrix_length, matrix_size =len(matrixA), len(matrixA[1,:])\n",
    "    Hamming_array=[]\n",
    "    itera=0\n",
    "    while itera<num0:\n",
    "        num1=random.randint(0,matrix_length)\n",
    "        num2=random.randint(0,matrix_length)\n",
    "        if num1 != num2:\n",
    "            seq_1=matrixA[num1]\n",
    "            seq_2=matrixA[num2]\n",
    "            diff=dH(seq_1,seq_2)\n",
    "            norm_diff=diff/matrix_size\n",
    "            Hamming_array.append(norm_diff)\n",
    "        elif num1 == num2:\n",
    "             num2=num2\n",
    "        itera=itera+1\n",
    "    return Hamming_array\n",
    "serial_num=np.arange(1000)\n",
    "Hamming= Hamming_same_sequence(sample,1000)\n",
    "plt.scatter(serial_num, Hamming)\n",
    "plt.xlabel('Number')\n",
    "plt.ylabel('Hamming_distance')\n",
    "plt.title('Ham_distance_between_pair_seq_in_same_ensemble')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "50c90bd2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#### Hamming distance between a randomly chosen generated sequence and its closest neighbor in natural sequences\n",
    "import random\n",
    "def Hamming_sample_neighbor_data(matrixA,matrixB,num0):\n",
    "    matrix_length, matrix_size =len(matrixA[0:100]), len(matrixA[1,:])\n",
    "    Hamming_min=[]\n",
    "    itera=0\n",
    "    while itera<num0:\n",
    "        Hamming=[]\n",
    "        num1=random.randint(0,matrix_length)\n",
    "        seq_1=matrixA[num1]\n",
    "        for i in range(matrix_length):\n",
    "            num2= i\n",
    "            seq_2=matrixB[num2]\n",
    "            diff=dH(seq_1,seq_2)\n",
    "            norm_diff=diff/matrix_size\n",
    "            Hamming.append(norm_diff)\n",
    "        minimum_Hamming= min(Hamming)\n",
    "        Hamming_min.append(minimum_Hamming)\n",
    "        itera=itera+1\n",
    "    return Hamming_min\n",
    "serial_num=np.arange(100)\n",
    "Hamming= Hamming_sample_neighbor_data(sample,align_new[0:13600],100)\n",
    "plt.scatter(serial_num, Hamming)\n",
    "plt.xlabel('Number')\n",
    "plt.ylabel('Hamming_distance')\n",
    "plt.title('Ham_distance_between_a_gen_seq_and_closest_neighbor_in_nat_seq')\n",
    "plt.show()\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "206ab96e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#### Hamming distance between every sequence and its closest neighbor within ensemble\n",
    "import random\n",
    "def Hamming_sample_neighbor_data(matrixA):\n",
    "    matrix_length, matrix_size =len(matrixA[0:100]), len(matrixA[1,:])\n",
    "    Hamming_min=[]\n",
    "    for i in range(matrix_length):\n",
    "            Hamming=[]\n",
    "            num1=i\n",
    "            seq_1=matrixA[num1]\n",
    "            for j in range(matrix_length):\n",
    "                if i== j:\n",
    "                    num1=num1\n",
    "                else:\n",
    "                    num2=j\n",
    "                    seq_2=matrixA[num2]\n",
    "                    diff=dH(seq_1,seq_2)\n",
    "                    norm_diff=diff/matrix_size\n",
    "                    Hamming.append(norm_diff)\n",
    "            minimum_Hamming= min(Hamming)\n",
    "            Hamming_min.append(minimum_Hamming)\n",
    "    return Hamming_min\n",
    "serial_num=np.arange(100)\n",
    "Hamming= Hamming_sample_neighbor_data(sample)\n",
    "plt.scatter(serial_num, Hamming)\n",
    "plt.xlabel('Number')\n",
    "plt.ylabel('Hamming_distance')\n",
    "plt.title('Ham_distance_between_every_seq_and_closest_neighbor_in_same_ensemble')\n",
    "plt.show()\n",
    "        \n",
    "      "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "17f7699c",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2b0883d2",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "5fc6a00c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.013600000000000001\n"
     ]
    }
   ],
   "source": [
    "def TwoPointFreq1(matrix,aminotype,sample_onepoint_freq):\n",
    "    matrixlen=len(matrix[:,1])\n",
    "    matrixsize=len(matrix[1,:])-1\n",
    "    Twopofreq1=[]\n",
    "    for p in range(matrixsize):\n",
    "        for q in range(p,matrixsize):\n",
    "            matrix1=np.zeros((matrixlen,3))\n",
    "            matrix1[:,0:2]=matrix[:,[p,q+1]]\n",
    "            for i in range(matrixlen):\n",
    "                matrix1[i,2]= aminotype*matrix1[i,0]+ matrix1[i,1]\n",
    "            samplemsa=np.zeros((matrixlen,aminotype**2))\n",
    "            for m in range(matrixlen):\n",
    "                samplemsa[m,int(matrix1[m,2])]= 1\n",
    "            twopoint=np.sum(samplemsa,axis=0)*(1/matrixlen)\n",
    "            Twopofreq1.append(twopoint)\n",
    "               \n",
    "    return Twopofreq1\n",
    "    \n",
    "Cijtwo_sample=TwoPointFreq1(sample,21,freq_sample)\n",
    "#Cijsample\n",
    "sumofweight=np.sum(trainingWeights_new[0:13600])\n",
    "prob=p\n",
    "print(sumofweight)\n",
    "def TwoPointFreq(matrix,aminotype,sample_onepoint_freq):\n",
    "    matrixlen=len(matrix[:,1])\n",
    "    matrixsize=len(matrix[1,:])-1\n",
    "    Twopofreq=[]\n",
    "    for p in range(matrixsize):\n",
    "        for q in range(p,matrixsize):\n",
    "            matrix1=np.zeros((matrixlen,3))\n",
    "            matrix1[:,0:2]=matrix[:,[p,q+1]]\n",
    "            for i in range(matrixlen):\n",
    "                matrix1[i,2]= aminotype*matrix1[i,0]+ matrix1[i,1]\n",
    "            samplemsa=np.zeros((matrixlen,aminotype**2))\n",
    "            for m in range(matrixlen):\n",
    "                weight111= trainingWeights_new[m]/sumofweight\n",
    "                samplemsa[m,int(matrix1[m,2])]= weight111\n",
    "            twopoint=np.sum(samplemsa,axis=0)\n",
    "            Twopofreq.append(twopoint)\n",
    "    return Twopofreq\n",
    "Cijtwo_data=TwoPointFreq(align_new[0:13600,:],21,prob) \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "150f3229",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "pearson_coefficient=np.corrcoef(np.array(Cijtwo_data).flatten(), np.array(Cijtwo_sample).flatten())[0][1]\n",
    "plt.scatter(Cijtwo_data,Cijtwo_sample,s=1)\n",
    "#plt.scatter(Cijtwo_new,Cijtwo1,s=1)\n",
    "plt.title(f\"Pearson_Coeff = {pearson_coefficient}\" )\n",
    "plt.xlabel(\"fij data\")\n",
    "plt.ylabel(\"fij sample\")\n",
    "plt.savefig('twopointfrequency_single_new.pdf')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "03fd4825",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def newnew(twotwo,aminotype,oneone):\n",
    "    matrixsize=52\n",
    "    Onepofreq =np.split(oneone,53)\n",
    "    Twopofreq=twotwo\n",
    "    #print(Onepofreq)\n",
    "    Mij=[]\n",
    "    i=0\n",
    "    t=0\n",
    "    while i<matrixsize:\n",
    "        for j in range(i+1,matrixsize+1):   \n",
    "            for p in range(aminotype):\n",
    "                for q in range(aminotype):\n",
    "                    #print(Twopofreq[i*52+j-1-t][aminotype*p+q]-np.multiply(Onepofreq[i][p],Onepofreq[j][q]))\n",
    "                    ccc=Twopofreq[i*52+j-1-t][aminotype*p+q]-Onepofreq[i][p]*Onepofreq[j][q]\n",
    "                    Mij.append(ccc)\n",
    "        i=i+1\n",
    "        t=t+i\n",
    "    return Mij \n",
    "    \n",
    "Cijsample=newnew(Cijtwo_sample,21,freq_sample)\n",
    "Cijdata=newnew(Cijtwo_data,21,p)\n",
    "pearson_coefficient=np.corrcoef(Cijdata,Cijsample)[0][1]\n",
    "#print(pearson_coefficient)\n",
    "plt.scatter(Cijdata,Cijsample,s=1)\n",
    "plt.title(f\"Pearson_Coeff = {pearson_coefficient}\" )\n",
    "plt.xlabel(\"fij data\")\n",
    "plt.ylabel(\"fij sample\")\n",
    "plt.xlim(-0.2,0.2)\n",
    "plt.ylim(-0.2,0.2)\n",
    "plt.savefig('twopointcorrelation_single_new.pdf')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "6a689541",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def threecorr(matrix,aminotype,sample_onepoint_freq):\n",
    "    matrixlen=len(matrix[:,1])\n",
    "    matrixsize=len(matrix[1,:])\n",
    "    threepointcorr=[]\n",
    "    for i in range(5):\n",
    "        for j in range(i+1,matrixsize-1):\n",
    "            for k in range(j+1, matrixsize):\n",
    "                #print(i,j,k)\n",
    "                ##for three point frequency\n",
    "                matrix4=np.zeros((matrixlen,4))\n",
    "                matrix4[:,0:3]=matrix[:,[i,j,k]]\n",
    "                for m in range(matrixlen):\n",
    "                    matrix4[m,3]= aminotype**2*matrix4[m,0] + aminotype*matrix4[m,1]+ matrix4[m,2]\n",
    "                samplemsa4=np.zeros((matrixlen,aminotype**3))\n",
    "                for m in range(matrixlen):\n",
    "                    samplemsa4[m,int(matrix4[m,3])]= 1\n",
    "                threepoint=np.sum(samplemsa4,axis=0)*(1/matrixlen);\n",
    "                ### for two point frequency FIRST\n",
    "                matrix3=np.zeros((matrixlen,3));\n",
    "                matrix3[:,0:2]=matrix[:,[i,j]]\n",
    "                for m in range(matrixlen):\n",
    "                    matrix3[m,2]= aminotype*matrix3[m,0]+ matrix3[m,1]\n",
    "                samplemsa3=np.zeros((matrixlen,aminotype**2))\n",
    "                for m in range(matrixlen):\n",
    "                    samplemsa3[m,int(matrix3[m,2])]= 1\n",
    "                twopointA=np.sum(samplemsa3,axis=0)*(1/matrixlen)\n",
    "                ### for two point frequency SECOND\n",
    "                matrix2=np.zeros((matrixlen,3))\n",
    "                matrix2[:,0:2]=matrix[:,[i,k]]\n",
    "                for m in range(matrixlen):\n",
    "                    matrix2[m,2]= aminotype*matrix2[m,0]+ matrix2[m,1]\n",
    "                samplemsa2=np.zeros((matrixlen,aminotype**2))\n",
    "                for m in range(matrixlen):\n",
    "                    samplemsa2[m,int(matrix2[m,2])]= 1\n",
    "                twopointB=np.sum(samplemsa2,axis=0)*(1/matrixlen)\n",
    "                ### for two point frequency THIRD\n",
    "                matrix1=np.zeros((matrixlen,3))\n",
    "                matrix1[:,0:2]=matrix[:,[j,k]]\n",
    "                for m in range(matrixlen):\n",
    "                    matrix1[m,2]= aminotype*matrix1[m,0]+ matrix1[m,1]\n",
    "                samplemsa1=np.zeros((matrixlen,aminotype**2))\n",
    "                for m in range(matrixlen):\n",
    "                    samplemsa1[m,int(matrix1[m,2])]= 1\n",
    "                twopointC=np.sum(samplemsa1,axis=0)*(1/matrixlen)\n",
    "                ### for first point frequencies \n",
    "                onepoint=np.split(sample_onepoint_freq,53)\n",
    "                onepointA=onepoint[i]\n",
    "                onepointB=onepoint[j]\n",
    "                onepointC=onepoint[k]\n",
    "                for p in range(aminotype):\n",
    "                    for q in range(aminotype):\n",
    "                        for r in range(aminotype):\n",
    "                            threepointcorr1=(threepoint[p*aminotype**2+q*aminotype+r]-twopointA[p*aminotype+q]*onepointC[r]\n",
    "                            -twopointB[p*aminotype+r]*onepointB[q]-twopointC[q*aminotype+r]*onepointA[p]\n",
    "                            + 2*onepointA[p]*onepointB[q]*onepointC[r])\n",
    "                            threepointcorr.append(threepointcorr1)\n",
    "                #print(threepointcorr)\n",
    "    return threepointcorr\n",
    "\n",
    "sumofweight=np.sum(trainingWeights_new[0:13600])\n",
    "prob=pa\n",
    "def threecorr_data(matrix,aminotype,sample_onepoint_freq):\n",
    "    matrixlen=len(matrix[:,1])\n",
    "    matrixsize=len(matrix[1,:])\n",
    "    threepointcorr_data=[]\n",
    "    for i in range(5):\n",
    "        for j in range(i+1,matrixsize-1):\n",
    "            for k in range(j+1, matrixsize): \n",
    "                #print(i,j,k)\n",
    "                ##for three point frequency\n",
    "                matrix4=np.zeros((matrixlen,4))\n",
    "                matrix4[:,0:3]=matrix[:,[i,j,k]]\n",
    "                for m in range(matrixlen):\n",
    "                    matrix4[m,3]= aminotype**2*matrix4[m,0] + aminotype*matrix4[m,1]+ matrix4[m,2]\n",
    "                samplemsa4=np.zeros((matrixlen,aminotype**3))\n",
    "                for m in range(matrixlen):\n",
    "                    weight111= trainingWeights_new[m]/sumofweight\n",
    "                    samplemsa4[m,int(matrix4[m,3])]= weight111\n",
    "                threepoint=np.sum(samplemsa4,axis=0)\n",
    "                ### for two point frequency FIRST\n",
    "                matrix3=np.zeros((matrixlen,3));\n",
    "                matrix3[:,0:2]=matrix[:,[i,j]]\n",
    "                for m in range(matrixlen):\n",
    "                    matrix3[m,2]= aminotype*matrix3[m,0]+ matrix3[m,1]\n",
    "                samplemsa3=np.zeros((matrixlen,aminotype**2))\n",
    "                for m in range(matrixlen):\n",
    "                    weight111= trainingWeights_new[m]/sumofweight\n",
    "                    samplemsa3[m,int(matrix3[m,2])]= weight111\n",
    "                twopointA=np.sum(samplemsa3,axis=0)\n",
    "                ### for two point frequency SECOND\n",
    "                matrix2=np.zeros((matrixlen,3))\n",
    "                matrix2[:,0:2]=matrix[:,[i,k]]\n",
    "                for m in range(matrixlen):\n",
    "                    matrix2[m,2]= aminotype*matrix2[m,0]+ matrix2[m,1]\n",
    "                samplemsa2=np.zeros((matrixlen,aminotype**2))\n",
    "                for m in range(matrixlen):\n",
    "                    weight111= trainingWeights_new[m]/sumofweight\n",
    "                    samplemsa2[m,int(matrix2[m,2])]= weight111\n",
    "                twopointB=np.sum(samplemsa2,axis=0)\n",
    "                ### for two point frequency THIRD\n",
    "                matrix1=np.zeros((matrixlen,3))\n",
    "                matrix1[:,0:2]=matrix[:,[j,k]]\n",
    "                for m in range(matrixlen):\n",
    "                    matrix1[m,2]= aminotype*matrix1[m,0]+ matrix1[m,1]\n",
    "                samplemsa1=np.zeros((matrixlen,aminotype**2))\n",
    "                for m in range(matrixlen):\n",
    "                    weight111= trainingWeights_new[m]/sumofweight\n",
    "                    samplemsa1[m,int(matrix1[m,2])]= weight111\n",
    "                twopointC=np.sum(samplemsa1,axis=0)\n",
    "                ### for first point frequencies \n",
    "                onepoint=np.split(sample_onepoint_freq,53)\n",
    "                onepointA=onepoint[i]\n",
    "                onepointB=onepoint[j]\n",
    "                onepointC=onepoint[k]\n",
    "                \n",
    "                for p in range(aminotype):\n",
    "                    for q in range(aminotype):\n",
    "                        for r in range(aminotype):\n",
    "                            threepointcorr1=(threepoint[p*aminotype**2+q*aminotype+r]-twopointA[p*aminotype+q]*onepointC[r]\n",
    "                            -twopointB[p*aminotype+r]*onepointB[q]-twopointC[q*aminotype+r]*onepointA[p]\n",
    "                            + 2*onepointA[p]*onepointB[q]*onepointC[r])\n",
    "                            threepointcorr_data.append(threepointcorr1)\n",
    "   \n",
    "                #print(threepointcorr)\n",
    "    return threepointcorr_data\n",
    "\n",
    "Cijk_sample1=threecorr(sample,21,freq_sample)\n",
    "Cijk_sample=np.array(Cijk_sample1).flatten()\n",
    "Cijk_data1=threecorr_data(align_new[0:13600],21,prob)\n",
    "Cijk_data=np.array(Cijk_data1).flatten()\n",
    "pearson_coefficient=np.corrcoef(Cijk_data,Cijk_sample)[0][1]\n",
    "plt.scatter(Cijk_data,Cijk_sample,s=1)\n",
    "plt.title(f\"Pearson_Coeff = {pearson_coefficient}\" )\n",
    "plt.xlabel(\"Cijk_data\")\n",
    "plt.ylabel(\"Cijk_sample\")\n",
    "plt.xlim(-0.03,0.03)\n",
    "plt.ylim(-0.03,0.03)\n",
    "plt.savefig('threepointcorrelation_single_new.pdf')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ae6c7f5f",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'np' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32mC:\\Users\\KAMALB~1\\AppData\\Local\\Temp/ipykernel_7592/2107266802.py\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mpearson_coefficient\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcorrcoef\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mCijk_data\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mCijk_sample\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      2\u001b[0m \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mpearson_coefficient\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mNameError\u001b[0m: name 'np' is not defined"
     ]
    }
   ],
   "source": [
    "pearson_coefficient=np.corrcoef(Cijk_data,Cijk_sample)\n",
    "print(pearson_coefficient)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "47ea4453",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[13, 40, 5, 0]\n",
      "[[13, 40, 5, 0]]\n"
     ]
    }
   ],
   "source": [
    "\n",
    "site1=random.randint(0,52)\n",
    "site2=random.randint(0,52)\n",
    "amino1=random.randint(0,20)\n",
    "amino2=random.randint(0,20)\n",
    "listnew=list([site1,site2,amino1,amino2])\n",
    "print(listnew)\n",
    "itera=0\n",
    "listA=[listnew]\n",
    "print(listA)\n",
    "if listnew not in listA:\n",
    "    listA.append(listnew)\n",
    "else:\n",
    "    itera=0\n",
    "    while listnew in listA:\n",
    "        site1=random.randint(0,52)\n",
    "        site2=random.randint(0,52)\n",
    "        amino1=random.randint(0,20)\n",
    "        amino2=random.randint(0,20)\n",
    "        listnew1=list([site1,site2,amino1,amino2])\n",
    "        listA.append(listnew1)\n",
    "        itera=itera+1\n",
    "print(listA[-1])  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a6976f29",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
